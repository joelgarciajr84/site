<?php

abstract class WP_Theme_Base
{
	public $site_url;
	public $template_url;
	public $template_directory;

	public function __construct()
	{
		$this->site_name          = get_bloginfo( 'name' );
		$this->site_description   = get_bloginfo( 'description' );
		$this->site_url 		  = esc_url( get_home_url() );
		$this->template_url 	  = esc_url( get_stylesheet_directory_uri() );
		$this->template_directory = esc_attr( get_stylesheet_directory() );
	}

	/**
	 * <not defined>
	 *
	 * <not defined>
	 *
	 * @param <not defined>
	 * @return <not defined>
	 */
	public function the_page_title()
	{
		global $page, $paged;

		wp_title( '|', true, 'right' );

		// Add the blog name.
		bloginfo( 'name' );

		// Add the blog description for the home/front page.
		$site_description = get_bloginfo( 'description', 'display' );
		if ( $site_description && ( is_home() || is_front_page() ) )
			printf( ' | %s', $site_description );

		// Add a page number if necessary:
		if ( $paged >= 2 || $page >= 2 )
			echo ' | ' . sprintf( 'PÃ¡gina %s', max( $paged, $page ) );
	}

	/**
	 * <not defined>
	 *
	 * <not defined>
	 *
	 * @param <not defined>
	 * @return <not defined>
	 */
	protected function _remove_meta_tags( $meta_tags = array() )
	{
		// All meta tags generated by WordPress
		if ( empty( $meta_tags ) )
			$meta_tags = array(
				'wp_generator',
				'feed_links',
				'feed_links_extra',
				'rsd_link',
				'wlwmanifest_link',
				'index_rel_link',
				'parent_post_rel_link',
				'start_post_rel_link',
				'adjacent_posts_rel_link_wp_head',
				'wp_shortlink_wp_head',
			);

		// Remove the meta tag generator from all resources, head, rss, etc
		if ( isset( $meta_tags['wp_generator'] ) )
			add_action( 'the_generator', '__return_false' );

		// An array with the same size of the $meta_tags to pass by in array_map
		$arr_hook = array_fill( 0, count( $meta_tags ), 'wp_head' );

		// Remove all tags contains in $meta_tags
		array_map( 'remove_action', $arr_hook, $meta_tags );
	}

	/**
	 * <not defined>
	 *
	 * <not defined>
	 *
	 * @param <not defined>
	 * @return <not defined>
	 */
	protected function _remove_admin_bar()
	{
		add_action( 'show_admin_bar', '__return_false' );
	}

	/**
	 * Maybe Create Term
	 *
	 * Creates a new term in taxonomy if not exists.
	 *
	 * @param array $term An array with slug and name of the term
	 * @param string $taxonomy The taxonomy slug
	 * @return void
	 */
	public function maybe_create_term( $term, $taxonomy, $args = array() )
	{
		$obj_term = get_term_by( 'name', $term, $taxonomy );

		if ( ! empty( $obj_term ) )
			return;

		wp_insert_term( $term, $taxonomy, $args );
	}

	/**
	 * <not defined>
	 *
	 * <not defined>
	 *
	 * @param <not defined>
	 * @return <not defined>
	 */
	public function pagination( $obj_query = null, $args = array() )
	{
		global $wp_query;

		if ( is_null( $obj_query ) )
			$obj_query = $wp_query;

		$total_pages  = $obj_query->max_num_pages;
		$current_page = get_query_var( 'paged' );
		$big          = 999999999;

		if ( $total_pages == 1 ) return;

		$defaults = array(
			'base'      => str_replace( $big, '%#%', get_pagenum_link( $big ) ), // need an unlikely integer cause the url can contains a number
			'format'    => '?paged=%#%',
			'current'   => max( 1, $current_page ),
			'total'     => $total_pages,
			'prev_next' => true,
			'end_size'  => 1,
			'mid_size'  => 2,
			'type'      => 'list',
		);

		$args = wp_parse_args( $args, $defaults );

		$pagination = paginate_links( $args );

		echo $pagination;
	}

	/**
	 * <not defined>
	 *
	 * <not defined>
	 *
	 * @param <not defined>
	 * @return <not defined>
	 */
	public function maybe_create_page( $post_name, $postdata = array() )
	{
		$defaults = array(
			'post_status' => isset( $postdata['status'] ) ? $postdata['status'] : 'publish',
			'post_type'   => 'page',
			'post_title'  => isset( $postdata['title'] ) ? $postdata['title'] : $post_name,
			'post_name'   => $post_name,
		);
		$args = wp_parse_args( $postdata, $defaults );

		$obj_page = get_page_by_path( $post_name );

		if ( ! empty( $obj_page ) )
			return false;

		$new_page = wp_insert_post( $args );

		if ( is_wp_error( $new_page ) )
			return false;

		return $new_page;
	}
}
